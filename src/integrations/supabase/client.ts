
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://jytgracbheteftrayvyo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp5dGdyYWNiaGV0ZWZ0cmF5dnlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE4NzQxMDgsImV4cCI6MjA1NzQ1MDEwOH0.V_SZD2qs8kOKwxDeTBLxY5yj2NWEpDzunZDP9zf5y3g";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to invoke edge functions with better error handling
export const invokeSyncFunction = async (functionName: string, payload: any) => {
  try {
    const { data, error } = await supabase.functions.invoke(functionName, {
      body: payload
    });
    
    if (error) {
      console.error(`Error invoking ${functionName}:`, error);
      return { error };
    }
    
    return { data };
  } catch (err) {
    console.error(`Exception invoking ${functionName}:`, err);
    return { error: err instanceof Error ? err.message : 'Unknown error' };
  }
};

// Helper function to clean up the database by truncating task-related tables
export const cleanupTaskDatabase = async () => {
  try {
    console.log('Starting database cleanup...');
    
    // Delete records in correct order to respect foreign key constraints
    // First delete from task_tags as it references both tasks and tags
    const { error: taskTagsError } = await supabase
      .from('task_tags')
      .delete()
      .not('id', 'is', null);
    
    if (taskTagsError) {
      console.error('Error clearing task_tags:', taskTagsError);
      return { error: taskTagsError.message };
    }
    
    // Then delete from recurring_tasks as it references tasks
    const { error: recurringTasksError } = await supabase
      .from('recurring_tasks')
      .delete()
      .not('id', 'is', null);
    
    if (recurringTasksError) {
      console.error('Error clearing recurring_tasks:', recurringTasksError);
      return { error: recurringTasksError.message };
    }
    
    // Then delete from task_history as it references tasks
    const { error: taskHistoryError } = await supabase
      .from('task_history')
      .delete()
      .not('id', 'is', null);
    
    if (taskHistoryError) {
      console.error('Error clearing task_history:', taskHistoryError);
      return { error: taskHistoryError.message };
    }
    
    // Finally delete from tasks table
    const { error: tasksError } = await supabase
      .from('tasks')
      .delete()
      .not('id', 'is', null);
    
    if (tasksError) {
      console.error('Error clearing tasks:', tasksError);
      return { error: tasksError.message };
    }
    
    console.log('Database cleanup completed successfully');
    return { success: true };
  } catch (err) {
    console.error('Exception during database cleanup:', err);
    return { error: err instanceof Error ? err.message : 'Unknown error during cleanup' };
  }
};
